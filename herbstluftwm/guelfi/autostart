#!/bin/bash
# herbstlayout - loads layouts for herbstluftwm, optionally with dmenu
#
# Requires a folder ($layouts_path) which contains one file for each layout.
# Each of these are bash-syntax files containing
#	- $layout, a variable holding the layout in "herbstclient dump"-format.
#	- autostart() (optional), a function executed when loading the layout
# 
# General syntax is "herbstlayout <COMMAND> <LAYOUTFILE>".
# Available commands:
#	- load: apply $layout to the current tag, and executes 
#	        autostart()
#	- reload: same as load, but uses the tag named LAYOUTFILE, not the current
# 	- add: creates a tag named LAYOUTFILE, binds it to $mod-(Shift-)N
#	       (where N is the greatest digit available), an loads it.
# Without arguments, it launches dmenu and asks for them.

# customize these variables
layouts_path=${layouts_path:-$XDG_CONFIG_HOME/herbstluftwm/layouts}
mod=Mod4
dmenu_cmd=${dmenu_cmd:-dmenu}

# do the actual loading (source the file, apply layout and execute autostart)
function load() {
	source "$layouts_path/$1"
	if ! herbstclient load "$2" "$layout" ; then
		echo "$0: applying layout $1 failed!" >&2
		exit 1
	fi
	autostart
}

# handle the action reported by dmenu ($1 -> command, $2 -> tag)
function action() {
	case $1 in
		# add tag with keybinding and load layout there
		add)
			if [[ ! -r $layouts_path/$2 ]] ; then
				echo "$0: could not find layout \"$2\"\!" >&2
				exit 1
			fi
			if herbstclient tag_status | grep "$2" >/dev/null ; then
				echo "$0: tag $2 already exists, use \"reload\" or \"load\"!" >&2
				exit 1
			fi
			herbstclient add "$2"
			tags=$(herbstclient tag_status | wc -w)
			if (( $tags > 9 )) ; then
				echo "$0: too many tags; will not get a keybinding" >&2
			else 
				herbstclient keybind "$mod-$tags" use "$2"
				herbstclient keybind "$mod-Shift-$tags" move "$2"
			fi
			load $2 $2
			herbstclient use $2
			;;
		# get current tag and load layout there
		load)
			tag=$(herbstclient tag_status | grep -oE '#[[:graph:]]*')
			load $2 ${tag:1}
			;;
		# load layout on the tag with the layout's name
		reload)
			if herbstclient tag_status | grep "$2" >/dev/null ; then
				load $2 $2
			fi	
			;;
		remove)
			tag=$(herbstclient tag_status | grep -oE '#[[:graph:]]*')

			# don't try to remove the current tag
			if [[ ${tag:1} = $2 ]] ; then

				# get the previous tag 
				prevtag=$(herbstclient tag_status \
				| grep -oE '[[:graph:]]*[[:space:]]*#' \
				| awk '{print $1}')

				# don't try remove the last tag
				if [[ -n $prevtag ]] ; then
					herbstclient use ${prevtag:1}
					herbstclient merge_tag $2 ${prevtag:1}
				fi

			else
				herbstclient merge_tag $2
			fi
			;;
		# save the current layout
		save)
			if [[ -e $layouts_path/$2 ]] ; then
				while true ; do
					reply=$(echo -e "yes\nno" \
					| $dmenu_cmd -p "$2 already exists. Overwrite?")

					case $reply in
						yes|Yes|y|Y)
							break
							;;
						no|No|n|N)
							return;
							;;
						*)
							:
							;;
					esac
				done
			fi

			# strip WINIDs from the dump
			layout=$(herbstclient dump | sed 's/ 0x[[:digit:]abcdef]*//g')
			cat > "$layouts_path/$2" <<- EOT
			#!/bin/bash
			# $layouts_path/$2
			# generated by herbstlayout
			layout='$layout'

			#function autostart() {
			# customize this as you like
			# for example, you can execute the rules for this layout here
			#}
			EOT
			;;
		*)
			echo "$0: unkown command!" >&2
			exit 1
			;;
	esac
}

# check for command line arguments
if (( $# == 2 )) ; then
	action $1 $2
	exit 0
fi

# dmenu stuff
cd "$layouts_path"
layouts=(*)
cd - >/dev/null

commands=$(cat <<- EOT
add
load
reload
remove
save
EOT
)

command=$($dmenu_cmd -p "herbstlayout " <<< "$commands")
(( $? != 0 )) && exit 125

layout=$(printf '%s\n' "${layouts[@]}" | $dmenu_cmd -p "herbstlayout $command")
(( $? != 0 )) && exit 125

action $command $layout

exit 0
